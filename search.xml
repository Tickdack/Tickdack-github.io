<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Effective C++ 从C到Cpp</title>
    <url>/archives/e18b7eda.html</url>
    <content><![CDATA[<h4 id="一、将C-视为一个语言联邦"><a href="#一、将C-视为一个语言联邦" class="headerlink" title="一、将C++视为一个语言联邦"></a>一、将C++视为一个语言联邦</h4><p><code>C++ ≈ &#123;C, C with class, Template C++, STL&#125;</code>，对于内置类型而言，Cpp采用以值传递的方式更高效，而对于用户自定义类型而言，一般采用以常引用传递的方式更好（这其中的成因与底层指令相关，所以学一学汇编是很重要的），在使用CPP哪个部分时，遵循那个部分。</p>
<h4 id="二、尽量不要使用C中的define语句"><a href="#二、尽量不要使用C中的define语句" class="headerlink" title="二、尽量不要使用C中的define语句"></a>二、尽量不要使用C中的define语句</h4><p>尽量不要使用<code>define</code>，尽管<code>define</code>很高效，但他只是忠实地替换了原始代码，会造成很多问题比如：</p>
<ol>
<li><p>定义<code>#define ABC 114514</code>时，由于编译器在<strong>预处理阶段</strong>移走了<code>ABC</code>而用114514替代，之前ABC的标记已经没有了，若是出了问题，打印的错误信息很可能是<code>error: 114514……</code>，而不是<code>error ABC...</code>，在带项目中难以定位，建议用<code>const int ABC = 114514</code>替代，出错也好debug</p>
</li>
<li><p>考虑使用宏：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a, b) (a) &gt; (b) ? (a) : (b)</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">max</span>(++a, b);		<span class="comment">//a会自增两次</span></span><br><span class="line"><span class="built_in">max</span>(++a, b + <span class="number">10</span>);	<span class="comment">//a自增一次</span></span><br></pre></td></tr></table></figure>
<p>这显然非常扯淡，一般而言，使用inline函数模板代替宏，更安全，更省心</p>
<blockquote>
<p>tips: 内联函数与宏的区别</p>
<p>1、内联函数在编译时展开，而宏在预编译时展开</p>
<p>2、在编译的时候，内联函数直接被嵌入到目标代码中去，而宏只是一个简单的文本替换。</p>
<p>3、内联函数可以进行诸如类型安全检查、语句是否正确等编译功能，宏不具有这样的功能。</p>
<p>4、宏不是函数，而inline是函数</p>
<p>5、宏在定义时要小心处理宏参数，一般用括号括起来，否则容易出现二义性。而内联函数不会出现二义性。</p>
<p>6、inline可以不展开，宏一定要展开。因为inline指示对编译器来说，只是一个建议，编译器可以选择忽略该建议，不对该函数进行展开。</p>
<p>7、宏定义在形式上类似于一个函数，但在使用它时，仅仅只是做预处理器符号表中的简单替换，因此它不能进行<strong>参数有效性的检测</strong>，也就不能享受C++编译器严<strong>格类型检查</strong>的好处，另外它的<strong>返回值也不能被强制转换</strong>为可转换的合适的类型，这样，它的使用就存在着一系列的隐患和局限性。</p>
</blockquote>
</li>
<li><p>想在编译期使用宏定义类似的功能，可使用<code>enum hack</code>大法，enum的行为很像加了限制区间的宏定义</p>
</li>
</ol>
<h4 id="三、尽可能多地使用const："><a href="#三、尽可能多地使用const：" class="headerlink" title="三、尽可能多地使用const："></a>三、尽可能多地使用const：</h4><p>区别<code>const int *</code>和<code>int * const</code>，前者修饰的是指向的东西，后者修饰的是指针</p>
<p>对于STL迭代器，其规则与主语言又有所不同：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;::iterator iter;	<span class="comment">//相当于int * const，迭代器指向不能改变</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::const_iterator citer;	<span class="comment">//相当于const int *，不能通过迭代器修改指向的元素</span></span><br></pre></td></tr></table></figure>

<p>对于运算符重载，最好将运算数声明为<code>const-reference</code>，并在重载时，考虑与基本类型运算符行为保持一致。</p>
<p>const对象只能调用const成员函数，这是符合const语义（不修改）的，同理，const成员函数内部只能访问成员变量，但无法修改，也无法访问普通成员函数（普通成员函数可能修改成员变量）</p>
<ol>
<li><p>将一些函数，变量加const可帮助编译器检查错误用法</p>
</li>
<li><p>const和non-const版本的函数除了返回以外无差别时，可使用强转令non-const调用const</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> position) <span class="keyword">const</span>&#123;</span><br><span class="line">    ........</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> position) &#123;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> &amp;&gt;(</span><br><span class="line">        <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> A&amp;&gt;(*<span class="keyword">this</span>)</span><br><span class="line">        	[position]</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="四、确定对象使用前被初始化："><a href="#四、确定对象使用前被初始化：" class="headerlink" title="四、确定对象使用前被初始化："></a>四、确定对象使用前被初始化：</h4><ol>
<li><p>为确保对象的行为如你预计般地可靠，必须确保每个对象使用前被初始化</p>
</li>
<li><p>对于成员对象，通常采用初始化列表的形式构造：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Society</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">     People p;</span><br><span class="line">     <span class="keyword">int</span> nums;</span><br><span class="line">     <span class="keyword">const</span> string rule;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">Society</span>(<span class="keyword">const</span> People&amp; tp, <span class="keyword">const</span> string&amp; s, <span class="keyword">int</span> n):</span><br><span class="line">         <span class="built_in">p</span>(tp),</span><br><span class="line">         <span class="built_in">rule</span>(s)</span><br><span class="line">        &#123;nums = n&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 通常，写为初始化列表的成员对象直接调用自己的构造函数进行构造，而采若用赋值的方式，其行为往往是使用default构造函数构造成员对象，再使用重载的”=”进行赋值。</p>
<p> 类型为引用和常量的成员变量必须使用初始化列表，不能采用赋值的形式</p>
<p> 对于一些初始化和赋值表现一样好的成员，可考虑写一个init函数，供多个不同的构造函数使用</p>
</li>
<li><p>对于non-local static对象，即多个文件（作用域，对象……）共享的静态对象，由于我们无法确定初始化顺序，而在一个对象未被初始化前调用它是很危险的，所以我们一般采用单例模式</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="built_in">test</span>()&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function">test&amp; <span class="title">get_test</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">static</span> test t;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective C++ 关于实现</title>
    <url>/archives/51196fbd.html</url>
    <content><![CDATA[<h4 id="一、尽可能延后变量定义式的出现时间"><a href="#一、尽可能延后变量定义式的出现时间" class="headerlink" title="一、尽可能延后变量定义式的出现时间"></a>一、尽可能延后变量定义式的出现时间</h4><ol>
<li><p>我们通过一个实例来进行说明，考虑一个对密码进行编码解码的函数</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">encode</span><span class="params">(<span class="keyword">const</span> std::string&amp; rawpassword)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    string encoded_password;</span><br><span class="line">    <span class="keyword">if</span>(rawpassword.<span class="built_in">length</span>() &lt; min_limit)&#123;</span><br><span class="line">        <span class="function">throe <span class="title">logic_error</span><span class="params">(<span class="string">&quot;Password is too short.&quot;</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> encoded_password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 若是<code>rawpassword</code>的长度较小因而使得控制流提前抛出异常，那对于<code>encoded_password</code>构造函数的调用就是一种浪费，所以，我们可以写：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">encode</span><span class="params">(<span class="keyword">const</span> std::string&amp; rawpassword)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="keyword">if</span>(rawpassword.<span class="built_in">length</span>() &lt; min_limit)&#123;</span><br><span class="line">        <span class="function">throe <span class="title">logic_error</span><span class="params">(<span class="string">&quot;Password is too short.&quot;</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    string encoded_password;</span><br><span class="line">    ...</span><br><span class="line">    encoded_password = rawpassword;</span><br><span class="line">    <span class="built_in">encrypted</span>(encoded_password);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> encoded_password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 更受欢迎的做法是以<code>password</code>为初值，跳过<code>default</code>构造和赋值：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">encode</span><span class="params">(<span class="keyword">const</span> std::string&amp; rawpassword)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="keyword">if</span>(rawpassword.<span class="built_in">length</span>() &lt; min_limit)&#123;</span><br><span class="line">        <span class="function">throe <span class="title">logic_error</span><span class="params">(<span class="string">&quot;Password is too short.&quot;</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function">string <span class="title">encoded_password</span><span class="params">(rawpassword)</span></span>;</span><br><span class="line">    <span class="built_in">encrypted</span>(encoded_password);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> encoded_password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 所以，<strong>我们在定义变量时，不但应延后定义变量直到不得不使用它为止，甚至应当尝试延后定义直到能够给它初值实参为止。</strong></p>
</li>
<li><p>对于一个循环结构内变量的初始化，我们应当评估两种方式：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//plan A</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">    Widget w;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//plan B</span></span><br><span class="line">Widget w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">    w = ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 来看看A和B的消耗：</p>
<ul>
<li><p>A ：n组构造 + n组析构</p>
</li>
<li><p>B ：一组构造 + 一组析构 + n组赋值</p>
</li>
</ul>
<p> 由于B的做法使得<code>w</code>的作用域更大，这导致了B的可维护性和易理解性不强，故而除非（1）你需要使某段代码的效率极高，（2）B的消耗远小于A，否则，应当常用A使得程序更为清晰</p>
</li>
</ol>
<h4 id="二、尽量少做转型"><a href="#二、尽量少做转型" class="headerlink" title="二、尽量少做转型"></a>二、尽量少做转型</h4><p>这里先来补充一下Cpp的转型。</p>
<p>Cpp有三种转型风格：</p>
<ol>
<li><p>C风格的转型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(T)expression;			<span class="comment">//将expression转型为T</span></span><br></pre></td></tr></table></figure></li>
<li><p>函数风格的转型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">T</span>(expression);			<span class="comment">//将expression转型为T</span></span><br></pre></td></tr></table></figure></li>
<li><p>C++提供的四种新式转型</p>
<p>上述两种转型方式虽然合法，且在C编程中常用，但新式转型往往更为受欢迎，因为它们很容易被程序员和编译器识别，在带project中十分有用</p>
<p>四种新式转型如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const_cast</span>&lt;T&gt;(expression);			<span class="comment">//常量性转除，从常量 ---&gt; 非常量</span></span><br><span class="line"><span class="keyword">dynamic_cast</span>&lt;T&gt;(expression);		<span class="comment">//安全地向下转型，用于类继承层次间的指针或引用转换</span></span><br><span class="line"><span class="keyword">reinterpret_cast</span>&lt;T&gt;(expression);	<span class="comment">//强制按该类型的二进制规则翻译过来，逐个bit去解释它</span></span><br><span class="line"><span class="keyword">static_cast</span>&lt;T&gt;(expression);			<span class="comment">//通用的普通转型</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>   使用<code>static_cast</code>可以抵消<code>explicit</code>：</p>
<figure class="highlight cc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>: </span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> a)</span>:num(a)&#123;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(A a)</span></span>;</span><br><span class="line"><span class="built_in">func</span>(<span class="number">15</span>); 					<span class="comment">//error，explicit阻止这一行为</span></span><br><span class="line"><span class="built_in">func</span>(<span class="built_in">A</span>(<span class="number">15</span>));				<span class="comment">//ok，既可以解释成调用构造，又可以解释成调用函数风格强转</span></span><br><span class="line"><span class="built_in">func</span>(<span class="keyword">static_cast</span>&lt;A&gt;(<span class="number">15</span>));	 <span class="comment">//ok，static可以抵消explicit</span></span><br></pre></td></tr></table></figure>

<p>在子类中使用父类函数 / 成员的正确方式是：</p>
<figure class="highlight cc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">parent</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">dosomething</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span> :</span> <span class="keyword">public</span> parent&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">            parent::<span class="built_in">dosomething</span>();	<span class="comment">//ok，正确的调用方式</span></span><br><span class="line">            <span class="keyword">static_cast</span>&lt;parent&gt;(*<span class="keyword">this</span>).<span class="built_in">dosomething</span>(); <span class="comment">//error，这里实际上是调用static_cast生成的临时对象</span></span><br><span class="line">                                                  <span class="comment">//若该函数与外界无交互，不影响，反之影响挺大，故不该这样写</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于<code>dynamic_cast</code>，尽量以其他方式替代它，因为<code>dynamic_cast</code>要满足动态性，需要更多的时间开销，常用的替代方法有：</p>
<ul>
<li>直接使用子类的指针（引用），不适用多态</li>
<li>将父类考虑得面面俱到，一些不适用的方法只写声明不写定义</li>
</ul>
<h4 id="三、避免返回handles指向对象内部"><a href="#三、避免返回handles指向对象内部" class="headerlink" title="三、避免返回handles指向对象内部"></a>三、避免返回handles指向对象内部</h4><ol>
<li><p>成员变量的封装性最多等于“返回其reference”的函数的访问级别。</p>
</li>
<li><p>返回一个代表对象内部数据的<code>handle</code>在一些情况下很方便，但这降低了对象的封装性。</p>
</li>
<li><p>返回refenrence可能会<strong>造成指针 / 引用 虚吊</strong>，经典情况如<strong>STL迭代器失效</strong>，这是由于handle比它所指对象更长寿造成的，应尽力避免这种情况。</p>
</li>
</ol>
<h4 id="四、为“异常安全”而努力"><a href="#四、为“异常安全”而努力" class="headerlink" title="四、为“异常安全”而努力"></a>四、为“异常安全”而努力</h4><ol>
<li><p>这里来补充一下C++中的异常</p>
<p>异常是指程序的控制流不能按预期工作且出错，这时程序会因异常而终止，C++使用<code>try</code>，<code>catch</code>以及<code>throw</code>来应对这一情况：</p>
   <figure class="highlight cc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    .... 				<span class="comment">// 本该运行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span>(execption)&#123;</span><br><span class="line">    .... 				<span class="comment">// 捕捉到异常execption后的应对策略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span>(exception)&#123;</span><br><span class="line">    <span class="keyword">throw</span> exception;	 <span class="comment">//捕捉到一个无法处理的异常，抛出给上级函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   其中<code>throw</code>关键字也可定义一个函数应当抛出的异常类型：</p>
   <figure class="highlight cc"><table><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">func</span> <span class="params">(T param)</span> <span class="title">throw</span> <span class="params">()</span></span>;		<span class="comment">//其中为空，表示不跑出异常</span></span><br><span class="line"><span class="function">T <span class="title">func</span> <span class="params">(T param)</span> <span class="keyword">noexcept</span></span>;		<span class="comment">//C++11不抛出异常版本</span></span><br><span class="line"><span class="function">T <span class="title">func</span> <span class="params">(T param)</span> <span class="title">throw</span> <span class="params">(<span class="keyword">int</span>)</span></span>;	<span class="comment">//表示只抛出int型异常</span></span><br><span class="line"><span class="function">T <span class="title">func</span> <span class="params">(T param)</span> <span class="title">throw</span> <span class="params">(<span class="keyword">int</span>, string)</span></span>;	<span class="comment">//表示抛出int和string型的异常</span></span><br></pre></td></tr></table></figure>

<p>   C++常见的异常类型如下：</p>
<table>
<thead>
<tr>
<th>异常</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>std::bad_alloc</code></td>
<td>内存分配失败</td>
</tr>
<tr>
<td><code>std::bad_cast</code></td>
<td><code>dynamic_cast</code>未通过运行时检查</td>
</tr>
<tr>
<td><code>std::bad_typeid</code></td>
<td>该异常由typeid抛出</td>
</tr>
<tr>
<td><code>std::bad_exception</code></td>
<td>如果函数的异常列表里声明了 bad_exception 异常，当函数内部抛出了异常列表中没有的异常时，都会被替换为 bad_exception 类型。</td>
</tr>
<tr>
<td><code>std::logic_error</code></td>
<td>逻辑错误</td>
</tr>
<tr>
<td><code>std::runtime_error</code></td>
<td>运行时错误</td>
</tr>
</tbody></table>
<blockquote>
<p>注：<code>typeid</code>的作用与<code>decltype</code>相似，都可以得到一个变量或者表达式的类型，不同的是，<code>typeid</code>方法得到的类型不能用于定义变量，可以用来进行类型的比较。</p>
</blockquote>
</li>
<li><p>异常安全性</p>
<p>   当因异常被抛出而导致程序暂时终止时，带有异常安全性的函数应当：</p>
<ol>
<li>不泄露任何资源</li>
<li>不允许数据遭到破坏</li>
</ol>
<p>   对于第一条，我们遵循RAII的原则，以对象管理数据，使得系统清理栈上资源而调用栈上对象的析构函数时，正好释放资源。</p>
<p>   而对于第二条不许数据遭到破坏，异常安全函数提供以下三个保证之一：</p>
<ol>
<li>基本承诺，异常被抛出时，程序的任何事物都是一个合法状态</li>
<li>强烈保证，如果异常被抛出，程序内的任何事物保证被复位</li>
<li>不抛掷保证，一旦有异常被抛出，绝对是很严重的错误，T func (T param) throw ();</li>
</ol>
<p>   对于异常安全性，有一个小tip可以导致强烈保证，它就是——<strong>copy and swap</strong>，我们先为要修改的对象提供一个副本，再在副本上做一切必要的修改，最终通过一个<strong>不抛出异常的<code>swap</code>函数</strong>对副本和本体进行置换，这样做，即使副本处产生异常，也不影响到本体，从而使异常安全性得到强烈保证。</p>
<p>   下面举个异常安全相关的例子：</p>
   <figure class="highlight cc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">changebackground</span><span class="params">(std::istream&amp; imgsrc)</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      Mutex mutex;</span><br><span class="line">      Image* bgimage;</span><br><span class="line">      <span class="keyword">int</span> imagechanges;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不提供异常安全保证版本，当new出现错误，毫无安全可言</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu::changebackground</span><span class="params">(std::istream&amp; imgsrc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">lock</span>(&amp;mutex);</span><br><span class="line">    <span class="keyword">delete</span> bgimage;</span><br><span class="line">    ++imagechanges;</span><br><span class="line">    bgimage = <span class="keyword">new</span> <span class="built_in">Image</span>(imgsrc);</span><br><span class="line">    <span class="built_in">unlock</span>(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本保证版本吗，new出现错误时，输入流已经被读走，所以是基本保证</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">          std::shared_ptr&lt;Image&gt; bgimage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu::changebackground</span><span class="params">(std::istream&amp; imgsrc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Lock <span class="title">ml</span><span class="params">(&amp;mutex)</span></span>;	<span class="comment">//RAII保证锁被释放</span></span><br><span class="line">    bgimage.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">Image</span>(imgsrc));</span><br><span class="line">    ++imagechanges;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//强烈保证版本，copy &amp; swap</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PMImpl</span>&#123;</span></span><br><span class="line">    std::shared_ptr&lt;Image&gt; bgimage;</span><br><span class="line">    <span class="keyword">int</span> imagechanges;</span><br><span class="line">&#125;PMImpl;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      Mutex mutex;</span><br><span class="line">      std::shared_ptr&lt;PMImpl&gt; pImpl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu::changebackground</span><span class="params">(std::istream&amp; imgsrc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::swap;</span><br><span class="line">    <span class="function">Lock <span class="title">ml</span><span class="params">(&amp;mutex)</span></span>;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;PMImpl&gt; <span class="title">pnew</span><span class="params">(<span class="keyword">new</span> PMImpl(*pImpl))</span></span>;	<span class="comment">//deep-copy</span></span><br><span class="line">    pnew-&gt;bgImage.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">Image</span>(imgsrc));</span><br><span class="line">    ++pnew-&gt;imagechanges;</span><br><span class="line">    <span class="built_in">swap</span>(pImpl, pnew);								<span class="comment">//none-exception swap</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   最后，不必一定给予强烈保证：</p>
   <figure class="highlight cc"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">f1</span>();</span><br><span class="line">    <span class="built_in">f2</span>();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   根据木桶原理，若func调用的函数无强烈保证，则很难让他成为一个有强烈保证的函数，而即使所有被调用的函数都有强烈保证，但<code>f2()</code>出现异常后复位，<code>f1()</code>没有出现异常，这依旧不是强烈保证，所以不必强求。</p>
</li>
</ol>
<h4 id="五、了解inline的里里外外"><a href="#五、了解inline的里里外外" class="headerlink" title="五、了解inline的里里外外"></a>五、了解inline的里里外外</h4><ol>
<li>inline的思想是将函数直接插入到程序中，使得一些<strong>本体执行比进行函数调用开销小</strong>的函数更有效率地运行（继承了宏的思想）</li>
<li>因为inline会将函数代码插入程序，所以可能会导致代码膨胀，使编译器产出更多的机器码，从而导致cache命中率下降导致效率降低</li>
<li>一个最佳方法时遵循 <a href="https://baike.baidu.com/item/%E5%B8%95%E7%B4%AF%E6%89%98%E6%B3%95%E5%88%99">2 - 8定律</a>，先使用不带inline版本的函数 ——&gt; 找出决定程序性能的20% ——&gt; 用各种奇技淫巧优化它</li>
</ol>
<h4 id="将文件编译依赖关系降到最低"><a href="#将文件编译依赖关系降到最低" class="headerlink" title="将文件编译依赖关系降到最低"></a>将文件编译依赖关系降到最低</h4><ol>
<li>支持“编译依存性最小化”的一般构想是，使得调用程序依赖于类型的“声明式”，而非“定义式”</li>
</ol>
<p>  定义式的<code>class</code>实现如下所示：</p>
  <figure class="highlight cc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      std::string name;</span><br><span class="line">      Date brithday;</span><br><span class="line">      Adress adress;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Person</span>(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> Date&amp; brithday, <span class="keyword">const</span> Adress&amp; adress);</span><br><span class="line">      <span class="function">std::string <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function">Date <span class="title">getBrithday</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function">Adress <span class="title">getAdress</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  直接将定义式放入头文件<code>person.h</code>，然后需要这个类时<code>include</code>这个头文件显然是很<code>navie</code>的想法，搭嘎，这么做的代价又是什么呢？</p>
<p>  代价就是——我们之后对该class进行版本迭代更新时，所有<code>include</code>它的文件都需要重新编译！</p>
<p>  <strong>对于这一问题，最佳解决策略是将定义式隐藏在背后，有两种方法可以达到这个目的，一是<code>PIMPL</code>大法，即将Person分割成两部分，一个负责提供接口（声明式），一个负责实现（定义式），这样做可以使文件编译依赖关系降到最低：</strong></p>
  <figure class="highlight cc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;personpimpl.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonImpl</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      std::string name;</span><br><span class="line">      Date brithday;</span><br><span class="line">      Adress adress;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Person</span>(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> Date&amp; brithday, <span class="keyword">const</span> Adress&amp; adress);</span><br><span class="line">      <span class="function">std::string <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function">Date <span class="title">getBrithday</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function">Adress <span class="title">getAdress</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;person.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      std::shared_ptr&lt;PersonImpl&gt; Pimpl;</span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Person</span>(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> Date&amp; brithday, <span class="keyword">const</span> Adress&amp; adress):</span><br><span class="line">          <span class="built_in">Pimpl</span>(std::make_shared&lt;PersonImpl&gt;(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> Date&amp; brithday, <span class="keyword">const</span> Adress&amp; adress))</span><br><span class="line">            &#123;&#125;</span><br><span class="line">      <span class="function">std::string <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Pimpl -&gt; <span class="built_in">getName</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  这样做，重构PersonImpl时就不需要重新编译程序文件了，只需要重新编译PersonImpl所在的 <code>.h</code>文件。</p>
<p>  另一个解决问题的方法是，编写一个抽象基类来描述规范，使用抽象基类指针来完成操作（多态），这种方法的经典实践如工厂模式：</p>
  <figure class="highlight cc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//产品的基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="comment">//基类中的纯虚函数</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//产品的子类Add</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product_Add</span> :</span> <span class="keyword">public</span> Product&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//产品的子类Mul</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product_Mul</span> :</span> <span class="keyword">public</span> Product&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a * b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">Product* <span class="title">Create</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">      <span class="built_in"><span class="keyword">switch</span></span> (i)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Product_Add;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Product_Mul;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>Pimpl大法会使得为每次访问增加间接性，且为每个对象增加了一个指针的大小，而<code>interface class</code>则为每次函数调用多付出了一个间接跳跃的成本（因为它的成员函数都是虚函数），但并不意味着不去使用它们，要大胆去用</p>
</li>
<li><p>程序库头文件应当以”完全且仅有声明式“的形式呈现给用户，这对是否涉及<code>template</code>都适用</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective C++ 构造/析构/赋值运算</title>
    <url>/archives/5d44e5a9.html</url>
    <content><![CDATA[<h4 id="一、了解C-默默编写并调用了哪些函数："><a href="#一、了解C-默默编写并调用了哪些函数：" class="headerlink" title="一、了解C++默默编写并调用了哪些函数："></a>一、了解C++默默编写并调用了哪些函数：</h4><ol>
<li><p>C++编译器会自动为一个空类生成8个成员函数：</p>
<ul>
<li>default构造函数</li>
<li>析构函数</li>
<li>copy构造函数</li>
<li>copy（赋值）运算符重载</li>
<li>取址运算符重载</li>
<li>常量取址运算符重载</li>
<li>移动构造函数（C++11）</li>
<li>移动赋值运算符重载（C++11）</li>
</ul>
<p>其中，当你定义了某个函数，C++便不会生成相应的成员函数，值得注意的是，<strong>从C++11起，如果一个类有析构函数，为其生成拷贝构造函数和拷贝赋值运算符的特性被弃用了。</strong></p>
</li>
<li><p>对于一些特殊情况，C++会拒绝生成这些成员函数，例如：reference（引用）的拷贝，base类的某个函数为private，derived类不会生成相应的函数</p>
</li>
</ol>
<h4 id="二、若不想使用编译器生成的函数，就该拒绝"><a href="#二、若不想使用编译器生成的函数，就该拒绝" class="headerlink" title="二、若不想使用编译器生成的函数，就该拒绝"></a>二、若不想使用编译器生成的函数，就该拒绝</h4><p>若某个对象应具有唯一性，那对它进行copy显然是不合理的，这种情况下，自行定义或不定义copy，都没有禁止copy行为，正确的做法有两种：</p>
<ol>
<li><p>将不想使用但必须拥有的成员函数<strong>声明</strong>为private而不去实现它：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">houseforsale</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="built_in">houseforsale</span>(<span class="keyword">const</span> houseforsale&amp; rhs);	<span class="comment">//声明而不实现</span></span><br><span class="line">    	houseforsale&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> houseforsale&amp; rhs);</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>利用访问限制，定义一个base类，该类中必须具有的成员函数声明为private：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">uncopyable</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="built_in">uncopyable</span>(<span class="keyword">const</span> uncopyable&amp;);</span><br><span class="line">    	uncopyable&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> uncopyable&amp;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">houseforsale</span> :</span> <span class="keyword">public</span> uncopyforsale&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="三、为多态基类声明virtual析构函数"><a href="#三、为多态基类声明virtual析构函数" class="headerlink" title="三、为多态基类声明virtual析构函数"></a>三、为多态基类声明virtual析构函数</h4><ol>
<li><p>当一个base类指针指向derived类对象时，若直接delete掉这个基类指针，会导致derived类资源未被释放，从而使得内存泄漏，故而在写希望产生多态效果的基类时，要将基类析构函数写为虚函数：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">base</span>()&#123;&#125;</span><br><span class="line">     <span class="keyword">virtual</span> ~<span class="built_in">base</span>()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">derived</span> :</span> <span class="keyword">public</span> base&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>虚函数为C++运行时多态（同名的函数，不同的效果）提供了支持，其基本原理是，具有虚函数的类中，除了成员数据部分，还会放一个虚函数表指针，指向一个放置虚函数指针的虚函数表，在运行阶段，程序通过虚函数表指针，找到虚函数表，再找到相应的函数，完成多态。</p>
</li>
<li><p>虚函数表指针是一个指针，是具有大小的，在32位系统中指针大小为32位bit（4byte），64位系统中为64位bit（8byte），因此，虽然虚函数很强大，但不必使每个类都有虚函数，通常做法是：当一个类中必不可少有一个虚函数时，才声明虚析构函数。</p>
</li>
</ol>
<h4 id="四、不要使析构函数抛出异常"><a href="#四、不要使析构函数抛出异常" class="headerlink" title="四、不要使析构函数抛出异常"></a>四、不要使析构函数抛出异常</h4><p>C++不喜欢析构函数吐出异常，比如</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weight</span>&#123;</span></span><br><span class="line">    ~<span class="built_in">Weight</span>()&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">std::vector&lt;Weight&gt; v;</span><br></pre></td></tr></table></figure>

<p>当v销毁时，它会销毁vector中的每一个Weight，但若有两个Weight在销毁时都抛出异常，会使程序终止或导致不明确行为，所以析构函数的异常应当自我消化，在捕捉到异常时，应当终止程序或记录异常采用鸵鸟策略，绝不应当在析构函数中抛出：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">example</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	Dbconnection db;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	~<span class="built_in">example</span>()&#123;</span><br><span class="line">        	<span class="keyword">try</span>&#123;db.<span class="built_in">close</span>();&#125;</span><br><span class="line">        	<span class="built_in"><span class="keyword">catch</span></span>(...)&#123;</span><br><span class="line">            	std::<span class="built_in">abort</span>();	<span class="comment">//使不正常程序终止</span></span><br><span class="line">            					<span class="comment">//或记录析构失败，继续执行</span></span><br><span class="line">        	&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外，作为软件开发人员，我们可将析构中可能包含异常的行为写成一个函数，供用户调用，使得用户去处理这个异常（甩锅给客户），若析构时发现用户未调用该函数，则在析构时处理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">example</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	Dbconnection db;</span><br><span class="line">    	<span class="keyword">bool</span> isclosed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">closedb</span><span class="params">()</span></span>&#123;			<span class="comment">//写给客户</span></span><br><span class="line">            db.<span class="built_in">close</span>();</span><br><span class="line">            isclosed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    	~<span class="built_in">example</span>()&#123;</span><br><span class="line">            <span class="keyword">if</span>(!isclosed)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;db.<span class="built_in">close</span>();&#125;</span><br><span class="line">        		<span class="built_in"><span class="keyword">catch</span></span>(...)&#123;</span><br><span class="line">            		std::<span class="built_in">abort</span>();	<span class="comment">//使不正常程序终止</span></span><br><span class="line">            		<span class="comment">//或 记录析构失败，继续执行</span></span><br><span class="line">        		&#125;</span><br><span class="line">            &#125;</span><br><span class="line">    	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="五、不在构造或析构过程中调用virtual函数"><a href="#五、不在构造或析构过程中调用virtual函数" class="headerlink" title="五、不在构造或析构过程中调用virtual函数"></a>五、不在构造或析构过程中调用virtual函数</h4><ol>
<li><p>举例游戏场景：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Game</span>();</span><br><span class="line">    ~<span class="built_in">Game</span>();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Log</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Game::<span class="built_in">Game</span>()&#123;</span><br><span class="line">        <span class="built_in">Log</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Game() Log()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line">Game::~<span class="built_in">Game</span>()&#123;</span><br><span class="line">        <span class="built_in">Log</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~Game() Log()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kill</span> :</span> <span class="keyword">public</span> Game &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Log</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;	<span class="comment">//const override表示重写父类虚函数</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Kill Log()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    Kill a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 这段代码在编译时会报waning，运行时也会出错，因为是Log函数为纯虚函数，无法对它产生调用，因为在派生类构造阶段，会先调用父类构造，再调用成员对象构造，最后才是自己的成员变量构造，故而在第一阶段时，父类的构造函数调用的是它本身的纯虚函数，而不是派生类的函数</p>
<p> 同样的道理也适用于析构函数，众所周知，析构函数和构造函数的顺序是反着来的</p>
</li>
<li><p>更奇怪的情况下，可能会让人摸不着头脑：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">Game</span>()&#123;<span class="built_in">init</span>();&#125;</span><br><span class="line">     <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Log</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">Log</span>();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kill</span> :</span> <span class="keyword">public</span> Game &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Log</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;	<span class="comment">//const override表示重写父类虚函数</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Kill Log()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> 对于这段代码，未经优化的编译器不会有任何反应（据说Visual Studio集成了整本Effective C++给出的建议），然而最终运行时，会报错：Kill调用了错误版本的Log()函数，使人在风中凌乱……所以，<strong>一定要确定自己的代码中，构造和析构函数中不调用虚函数</strong></p>
</li>
<li><p>那么，我们想实现类似的功能该怎么办呢，一个好的方法将原函数写为非虚的，在构造时传参到Base类中</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="built_in">Game</span>(<span class="keyword">const</span> string&amp; loginfo)&#123;</span><br><span class="line">            <span class="built_in">Log</span>(loginfo);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="built_in">Log</span>(<span class="keyword">const</span> string&amp; loginfo)&#123;....&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kill</span> :</span> <span class="keyword">public</span> Game&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="built_in">Kill</span>(parameters):<span class="built_in">Game</span>(<span class="built_in">createinfo</span>(parameters))&#123;...&#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">static</span> <span class="keyword">const</span> string&amp; <span class="title">createinfo</span><span class="params">(parameters)</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="六、operator-“-“-的重载"><a href="#六、operator-“-“-的重载" class="headerlink" title="六、operator “ = “ 的重载"></a>六、operator “ = “ 的重载</h4><ol>
<li><p>为了使自定义重载运算符和基本类型运算符保持一致，我们通常使” = “返回一个当前对象的reference to *this</p>
</li>
<li><p>对于一个含指针的类Weight，我们对它的赋值函数进行三次改版。</p>
<p>先是Weight类：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weight</span>&#123;</span></span><br><span class="line">    Bitmap *pb;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	Weight&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Weight&amp; rhs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一版赋值函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//version_1</span></span><br><span class="line">Weight&amp; Weight::<span class="keyword">operator</span> = (<span class="keyword">const</span> Weight&amp; rhs)&#123;</span><br><span class="line">    <span class="keyword">delete</span> pb;</span><br><span class="line">    pb = <span class="keyword">new</span> <span class="built_in">Bitmap</span>(*rhs.pb);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种情况下，当<code>lhs == rhs</code>时，逻辑上，这个函数已经出错了！Bitmap将指向一个已被删除的对象！由此引出第二版赋值构造函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//version_2</span></span><br><span class="line">Weight&amp; Weight::<span class="keyword">operator</span> = (<span class="keyword">const</span> Weight&amp; rhs)&#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs == *<span class="keyword">this</span>)	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">delete</span> pb;</span><br><span class="line">    pb = <span class="keyword">new</span> <span class="built_in">Bitmap</span>(*rhs.pb);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个版本中，我们对于传入参数和自身进行了比较，有效地避免了<code>rhs == lhs</code>的问题。</p>
<p>但是，这个新版本依旧有问题：若是new Bitmap时出现异常（可能由于内存不够，可能由于copy抛出异常），由于先删除了pb后赋值，对象内的指针会指向一块被删除的Bitmap，为此，出现了第三版：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//version_3</span></span><br><span class="line">Weight&amp; Weight::<span class="keyword">operator</span> = (<span class="keyword">const</span> Weight&amp; rhs)&#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs == *<span class="keyword">this</span>)	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    Bitmap *tpb = pb;</span><br><span class="line">    pb = <span class="keyword">new</span> <span class="built_in">Bitmap</span>(*rhs.pb);</span><br><span class="line">    <span class="keyword">delete</span> tpb;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一版就没有上述两版的问题了，它既有证同测试，又有防异常行为，prefect version达成了！</p>
<p>对于性能提升上，Ecpp还给出了一个新的版本：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Weight &amp;rhs)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">Weight&amp; Weight::<span class="keyword">operator</span> = (Weight rhs)&#123;</span><br><span class="line">    <span class="built_in">swap</span>(rhs);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>它利用了传值时会调用拷贝构造这一行为，其思想和移动很像，这应该是“移动”的前身了！</strong></p>
</li>
</ol>
<h4 id="七、复制对象时切勿忘记复制它的每个部分"><a href="#七、复制对象时切勿忘记复制它的每个部分" class="headerlink" title="七、复制对象时切勿忘记复制它的每个部分"></a>七、复制对象时切勿忘记复制它的每个部分</h4><ol>
<li>copy系函数应当确保复制<strong>对象内所有的成员变量</strong>和<strong>所有Base类的成分</strong></li>
<li>不要使copy构造函数和copy operator函数相互调用，通常将它们共通的部分写在一个函数中去调用。</li>
</ol>
]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective C++ 设计与声明</title>
    <url>/archives/88db60c2.html</url>
    <content><![CDATA[<h4 id="一、让接口容易被正确使用，不易被误用"><a href="#一、让接口容易被正确使用，不易被误用" class="headerlink" title="一、让接口容易被正确使用，不易被误用"></a>一、让接口容易被正确使用，不易被误用</h4><ol>
<li><p>使接口容易被正确使用</p>
<p>比如我们开发一个表现日期的类：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Date</span>&#123;</span></span><br><span class="line">     <span class="keyword">public</span>:</span><br><span class="line">         <span class="built_in">Date</span>(<span class="keyword">int</span> month, <span class="keyword">int</span> day, <span class="keyword">int</span> year);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//顾客可能会这样使用：</span></span><br><span class="line"><span class="function">Date <span class="title">d</span><span class="params">(<span class="number">3</span>, <span class="number">30</span>, <span class="number">1995</span>)</span></span>;	<span class="comment">//正确</span></span><br><span class="line"><span class="function">Date <span class="title">d</span><span class="params">(<span class="number">30</span>, <span class="number">3</span>, <span class="number">1995</span>)</span></span>;	<span class="comment">//error</span></span><br><span class="line"><span class="comment">//或是，超出范围地写出不正确的日期</span></span><br><span class="line"><span class="function">Date <span class="title">d</span><span class="params">(<span class="number">4</span>, <span class="number">55</span>, <span class="number">1995</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>完全不合理，故而可以这样设计：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Day</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Day</span><span class="params">(<span class="keyword">int</span> d)</span>:val(d)&#123;</span>&#125;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Date</span>(<span class="keyword">const</span> Month&amp; m, <span class="keyword">const</span> Day &amp; d, <span class="keyword">const</span> Year&amp; y)&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者，给代码足够的注释：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *@brief:简介，简单介绍函数作用</span></span><br><span class="line"><span class="comment">        *@param:介绍函数参数</span></span><br><span class="line"><span class="comment">        *@return:函数返回类型说明</span></span><br><span class="line"><span class="comment">        *@exception NSException:可能抛出的异常.</span></span><br><span class="line"><span class="comment">        *@author zhangsan:作者</span></span><br><span class="line"><span class="comment">        *@date 2011-07-27 22:30:00:时间</span></span><br><span class="line"><span class="comment">        *@version 1.0:版本  </span></span><br><span class="line"><span class="comment">        *@property:属性介绍</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">Date</span>(<span class="keyword">int</span> m, <span class="keyword">int</span> d, <span class="keyword">int</span> y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使接口与普遍认可的接口保持一致，比如，STL中，获取容器当前装载个数的接口都是size()，一个好的设计，应当使接口保持一致性。</p>
</li>
<li><p>阻止接口误用，方法包括：<strong>建立新类型，限制类型上的操作，束缚对象值，以及甩锅给客户（你把注释写得足够好，本身代码又没问题，只能怪客户咯）</strong></p>
</li>
<li><p>曾经不少的DLL会出现一种在某个DLL内部新建一块资源，在另一个DLL内部过早或者不正确地delete掉（比如我们想要的删除行为是释放，或者对计数值减一，而它真的把东西删掉了），产生bug的现象，这种情况下，建议在写类的时候就将资源保管在智能指针内部，并指定它的删除器）</p>
</li>
</ol>
<h4 id="二、设计class如同设计type"><a href="#二、设计class如同设计type" class="headerlink" title="二、设计class如同设计type"></a>二、设计class如同设计type</h4><p>当设计一个class时，我们应当尽可能周全地考虑清楚可能发生的事，好的type应当又自然的语法，直观的语义，多个高效的实现，当进行设计前，不妨思考以下问题：</p>
<ul>
<li>新的type该如何被创建和销毁 </li>
<li>对象的初始化和对象赋值应当有何区别</li>
<li>新的type若被传值，会发生什么（copy构造函数行为）</li>
<li>什么是新type的合法值？（比如Month类不该超出12或1）</li>
<li>新的type需要配合某种继承吗，需不需要virtual？</li>
<li>新的type是否需要类型转换</li>
<li>新的type需要用到哪些操作符</li>
<li>什么样的标准函数应当驳回（比如不符合现实逻辑的复制房产证对象）</li>
<li>新的type有多么一般化，是不是该考虑从类升级到类模板</li>
<li>你是否真的需要一个新的type</li>
</ul>
<h4 id="三、多使用pass-by-renference-to-const-替换-pass-by-value"><a href="#三、多使用pass-by-renference-to-const-替换-pass-by-value" class="headerlink" title="三、多使用pass by renference to const 替换 pass by value"></a>三、多使用pass by renference to const 替换 pass by value</h4><p>在一些情况下，pass by renference to const 比 pass by value 更为节约时空成本，举例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	string name;</span><br><span class="line">    	string address;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="built_in">Person</span>()&#123;&#125;</span><br><span class="line">    	<span class="keyword">virtual</span> ~<span class="built_in">Person</span>()&#123;&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">            std::cout &lt;&lt; name &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; address &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span> <span class="keyword">public</span> Person&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	string school;</span><br><span class="line">    	String _class;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="built_in">Student</span>()&#123;&#125;</span><br><span class="line">    	~<span class="built_in">Student</span>()&#123;&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Person::<span class="built_in">print</span>();</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;----------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            std::cout &lt;&lt; school &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; _class &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>试想，现针对Student有一个接口<code>void dosomething(Student s)&#123;&#125;</code>，当我们用值传递时，这涉及到一次Student copy调用，两次string copy调用（school与class），一次Person copy调用以及两次string copy调用（name与adress），共六次copy调用加这些对象的销毁……但若是使用<code>void dosomething(const Student &amp;s)</code>，则只涉及到一个引用传递，极为便捷。</p>
<p>再考虑一个例子，对于Person和Student，我们写一个函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printinfo</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">print</span>();</span><br><span class="line">    <span class="comment">//do something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于这个函数，我们这样使用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Student s;</span><br><span class="line"><span class="built_in">printinfo</span>(s);</span><br></pre></td></tr></table></figure>

<p>当以值传入一个Student时，由于这里进行值传递，printinfo中的p会被构造成一个Person对象，因此打印出的信息只有一部分，这是不合适的，而若使用const Person&amp; 作为参数，这种情况下由于多态的存在，是完全OK的。</p>
<h4 id="四、必须返回临时对象时，使用值传递"><a href="#四、必须返回临时对象时，使用值传递" class="headerlink" title="四、必须返回临时对象时，使用值传递"></a>四、必须返回临时对象时，使用值传递</h4><p><strong>若是某个函数需要返回一个函数内进行处理的local对象，一般采用值传递</strong>，因为函数的local对象会在函数调用完毕时自动被回收（操作系统管理栈，程序员管理堆），而若local对象是在堆上的，则你必须考虑它的delete以防止资源泄漏，比如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span>&#123;</span></span><br><span class="line">    <span class="comment">//resource</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="keyword">friend</span> complex&amp; <span class="keyword">operator</span> * (<span class="keyword">const</span> complex&amp; a, <span class="keyword">const</span> complex&amp; b);</span><br><span class="line">&#125;</span><br><span class="line">complex&amp; <span class="keyword">operator</span> * (<span class="keyword">const</span> complex&amp; a, <span class="keyword">const</span> complex&amp; b)&#123;</span><br><span class="line">    complex* res = <span class="keyword">new</span> complex;</span><br><span class="line">    <span class="comment">//some precess</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">complex <span class="title">a</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">complex <span class="title">b</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">complex <span class="title">c</span><span class="params">(<span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">complex d = a * b * c;</span><br><span class="line"><span class="comment">//这种情况下，你没有合理的方法去delete掉它当中产生的指针！注意它调用了两次乘法!</span></span><br></pre></td></tr></table></figure>

<p>所以，一般情况下，从函数返回时使用pass by value</p>
<h4 id="五、将成员变量声明为private"><a href="#五、将成员变量声明为private" class="headerlink" title="五、将成员变量声明为private"></a>五、将成员变量声明为private</h4><p>将成员变量声明为private为类提供了细微的访问控制划分，且对于用户而言，日后的改动并不影响之前的代码，private为类提供了其封装性。</p>
<p>对象的封装性与其代码改动时可能造成的代码破坏量成正比，故而对于一个public成员，在改动它时，所有使用它的代码都会受到影响，这是一个不可知量，而对于一个protected成员，在改动它时，所有derived class都会受到影响，这也是一个不可知量，所以<strong>在封装的观点中，只有两种访问权限：private，others。</strong></p>
<h4 id="六、若non-member-no-friend函数和member函数可以做到同样的事，使用non-member函数"><a href="#六、若non-member-no-friend函数和member函数可以做到同样的事，使用non-member函数" class="headerlink" title="六、若non-member, no friend函数和member函数可以做到同样的事，使用non-member函数"></a>六、若<em>non-member, no friend函数</em>和<em>member</em>函数可以做到同样的事，使用<em>non-member</em>函数</h4><p>对于一个类，如果越多的成员被隐藏，越少的代码可以改变它，那么我们认为这个类的封装性就越好；作为一个粗略的量度，我们认为，越多的函数可以访问它，数据的封装性就越差。因此，在一个<em>non-member, no friend函数</em>和一个<em>member</em>函数中去选择，为了增强数据的封装性，我们往往更倾向于选择前者，因为它不增加能够访问类中private成员的函数数量，也就是说，它提供了更好的封装性。而且，这个<em>non-member, no friend函数</em>可以是另一个类的成员函数。</p>
<p>通常，我们会将这个<em>non-member, no friend函数</em>和需要操作的类写在同一个命名空间中：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> WebBroswerStuff&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WebBroswer</span>&#123;</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearBroswer</span><span class="params">(WebBroswer &amp;)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用命名空间不止增加了程序的可读性，由于命名空间可跨越多个文件，它也为组织代码提供了便利。</p>
<p>比如一个<code>WebBroswer</code>类需要书签，cookie，设置等多个小功能，一个只使用cookie的客户没道理也要编译书签相关的东西。而使用namespace，你可以将它们分离在不同的头文件中：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头文件&quot;webbroswer.h&quot; WebBroswer核心</span></span><br><span class="line"><span class="keyword">namespace</span> WebBroswerStuff&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WebBroswer</span>&#123;</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearBroswer</span><span class="params">(WebBroswer &amp;)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头文件&quot;webbroswerbookmarks.h&quot; </span></span><br><span class="line"><span class="comment">//书签功能</span></span><br><span class="line"><span class="keyword">namespace</span> WebBroswerStuff&#123;</span><br><span class="line">    ...			<span class="comment">//书签功能便利函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头文件&quot;webbroswercookies.h&quot;</span></span><br><span class="line"><span class="comment">//cookie相关</span></span><br><span class="line"><span class="keyword">namespace</span> WebBroswerStuff&#123;</span><br><span class="line">    ...			<span class="comment">//cookie功能便利函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，用户就可以根据自己的需要，选择编译某一部分，降低了代码的编译依存性，也使得用户可以根据自己的需求去扩展功能，他们只需要添加需要的<em>non-member, no friend</em>函数到此命名空间中。</p>
<p>使用<em>non-member, no friend</em>函数叠加namespace可以增加封装性，包裹弹性和技能扩充性</p>
<h4 id="七、若所有参数都需要类型转换，使用non-member函数"><a href="#七、若所有参数都需要类型转换，使用non-member函数" class="headerlink" title="七、若所有参数都需要类型转换，使用non-member函数"></a>七、若所有参数都需要类型转换，使用non-member函数</h4><p>比如新定义了一个类<code>Complex</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="keyword">double</span> real;</span><br><span class="line">    	<span class="keyword">double</span> imag;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="built_in">Complex</span>(<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>):</span><br><span class="line">    		<span class="built_in">real</span>(r),</span><br><span class="line">    		<span class="built_in">imag</span>(i)</span><br><span class="line">            &#123;&#125;</span><br><span class="line">    	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们想为这个Complex类型定义一个乘法运算符重载函数时，有两种选择，一种是使用member函数，一种是使用non-member函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//member:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex&amp; r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//non-member:</span></span><br><span class="line">Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex&amp; l, <span class="keyword">const</span> Complex&amp; r);</span><br></pre></td></tr></table></figure>

<p>若我们直接使用一个整数去乘以一个Complex对象，这个需求是很合理的，但让我们想想，将整数放在 * 号左边和右边带来的影响：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//member</span></span><br><span class="line"><span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">5</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">Complex b;</span><br><span class="line">b = a * <span class="number">2</span>;	<span class="comment">//OK，这里编译器隐式转换2为一个Complex对象</span></span><br><span class="line">b = <span class="number">2</span> * a;	<span class="comment">//error，这里编译器并不会隐式转换2！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//non-member</span></span><br><span class="line"><span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">5</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">Complex b;</span><br><span class="line">b = a * <span class="number">2</span>;	<span class="comment">//OK</span></span><br><span class="line">b = <span class="number">2</span> * a;	<span class="comment">//OK</span></span><br><span class="line">b = <span class="number">2</span> * <span class="number">3</span>;	<span class="comment">//OK</span></span><br></pre></td></tr></table></figure>

<p>所以当函数所有参数都需要隐式转换，将他写为一个non-member函数</p>
<h4 id="八、考虑写一个不抛出异常的swap函数"><a href="#八、考虑写一个不抛出异常的swap函数" class="headerlink" title="八、考虑写一个不抛出异常的swap函数"></a>八、考虑写一个不抛出异常的swap函数</h4><p>随着modern C++的到来，强大的移动语义已经在一些方面代替了swap，但会写一个方便的swap函数在某些情况下还是必不可少的。</p>
<p>在Cpp11前，swap函数定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std&#123;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;T&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">void</span> <span class="title">swap</span><span class="params">(T&amp; a, T&amp; b)</span></span>&#123;</span><br><span class="line">        <span class="function">T <span class="title">temp</span><span class="params">(a)</span></span>;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的<code>swap</code>实现十分常见，但对于一些类型，这是完全不必要的，若你使用<strong>pimpl</strong>手法对设计一个类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetImpl</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	....</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    	<span class="keyword">int</span> a, b, c;</span><br><span class="line">    	....</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="built_in">Widget</span>(<span class="keyword">const</span> Widget&amp; rhs);</span><br><span class="line">    	Widget&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Widget&amp; rhs);</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	WidgetImpl* pImpl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，若是使用<code>std</code>中的<code>swap</code>函数对两个Widget对象进行交换，根据Widget复制构造和复制运算符实现的不同，有可能一个swap会复制三次WidgetImpl对象，这显然是不太对的（Cpp1x中已经有了移动语义，但作者写这本书的时候移动还尚未出现，前人栽树，后人乘凉吧算是）。针对这一情况，我们可以针对Widget，在std中为其写一个特化版本的<code>swap</code>函数，让编译器自动调用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Widget&amp; rhs)</span></span>&#123;</span><br><span class="line">            <span class="keyword">using</span> std::swap;</span><br><span class="line">            <span class="built_in">swap</span>(pImpl, rhs.pImpl);</span><br><span class="line">        &#125;    </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	WidgetImpl* pImpl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std&#123;		<span class="comment">//特化意味着具体化，从template的抽象化变具体，半特化如：template&lt;T, Widget&gt;</span></span><br><span class="line">    <span class="keyword">template</span>&lt;&gt;</span><br><span class="line">    <span class="keyword">void</span> swap&lt;Widget&gt;(Widget&amp; l, Widget&amp; r)&#123;</span><br><span class="line">        l.<span class="built_in">swap</span>(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>采用这种方法，不仅解决了问题，而且与STL容器的实现具有一致性，所有STL容器都提供一个public swap和一个std中的swap的特化版本</p>
<p><strong>而对于一个类模板，上述的写法将不再适用</strong>。如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetImpl</span>&#123;</span>...&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>&#123;</span>...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std&#123;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="keyword">void</span> swap&lt;Widget&lt;T&gt;&gt;(Widget&lt;T&gt;&amp; l, Widget&lt;T&gt;&amp; r)&#123;</span><br><span class="line">        l.<span class="built_in">swap</span>(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种情况是不被允许的，因为std中允许添加全特化版本的templates，但对于新的templates是明确禁止的，故而，我们为Widget模板相关的东西增加一个专有的命名空间：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> WidgetStuff&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Widget</span>&#123;</span>...&#125;;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="keyword">void</span> swap&lt;Widget&lt;T&gt;&gt;(Widget&lt;T&gt;&amp; l, Widget&lt;T&gt;&amp; r)&#123;</span><br><span class="line">        l.<span class="built_in">swap</span>(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当你编写一个func template，且该模板内需要swap操作时，应当这样写：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dosomething</span><span class="params">(T&amp; a, T&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::swap;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">swap</span>(a, b);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样编写有助于编译器采取更好的swap，如果传入的T的专有命名空间内有一个swap，编译器会优先调用它，若是没有，编译器会使用std空间内部的默认swap。<code>using std::swap</code>的作用是使std中的swap在函数内曝光，若是<code>std::swap(a, b)</code>则只会使得编译器只使用std内部的版本，失去了高效性和灵活性。</p>
<ol>
<li>当std::swap效率不高时，提供一个public member的swap函数，并保证它不抛出异常</li>
<li>提供一个non-member调用member的swap，对于classes，使这个non-member成为一个全特化版本并放入std空间，对于templates，把它放入其专有空间，尽量使得代码保持一致性</li>
<li>可能用到std::swap时，采用声明：<code>using std::swap</code>，然后正常调用它</li>
</ol>
]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective C++ 资源管理</title>
    <url>/archives/8a9f90a1.html</url>
    <content><![CDATA[<p>本章提出的不少思想和方法，在目前的modern C++中已经得到了实践和改进，因此，曾思考过是否要写本章笔记，后来觉得，了解一下来龙去脉也挺好的，所以有了本次总结。</p>
<h4 id="一、以对象管理资源"><a href="#一、以对象管理资源" class="headerlink" title="一、以对象管理资源"></a>一、以对象管理资源</h4><p>所谓资源，便是使用之后须还给系统，C++常见的资源类型有：动态申请的内存，文件描述符，互斥锁，数据库连接，网络socket连接等等，由于可能存在的各种问题，推荐以对象管理资源的形式对资源进行管理。</p>
<ol>
<li><p>为何以对象管理资源</p>
<p>通常情况下，我们可能会这样写一个程序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>&#123;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Example *ptre = <span class="keyword">new</span> Example;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">delete</span> ptre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但这样的内存管理具有一定缺陷，若是控制流由于异常，过早的return，或是被魔改而提前退出而抵达不了<code>delete ptre</code>语句，我们便可能将Example所保存的那部分资源泄露。</p>
<p>故而，C++提出了以对象管理资源的方式，把资源放入对象中，当控制流离开func，该对象对应的析构函数便可以自动释放那些资源，这正是利用了<strong>C++析构函数自动调用机制来解决问题（即系统自动释放栈内资源）</strong>。</p>
</li>
<li><p>以对象管理资源</p>
<p>以对象管理资源应当遵循两个基本守则：</p>
<ul>
<li>获得资源后立刻放入对象</li>
<li>管理对象调用析构函数时确保释放资源</li>
</ul>
</li>
<li><p>C++的智能指针</p>
<p>遵循以对象管理资源的理念，C++提供了几个智能指针：<code>auto_ptr</code>，<code>shared_ptr</code>，<code>unique_ptr</code>以及<code>weak_ptr</code>。</p>
<p>首先须说明的是，<code>auto_ptr</code>由于并不符合copy语义，而更像是移动语义，所以C++1x中已被<code>unique_ptr</code>代替，接下来康康auto和 shared两种ptr的用法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//智能指针使用示例</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memroy&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//auto_ptr</span></span><br><span class="line"><span class="function">std::auto_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">2</span>))</span></span>;</span><br><span class="line">std::auto_ptr&lt;<span class="keyword">int</span>&gt; ptr2 = ptr;		<span class="comment">//ptr为null，根本不符合copy语义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shared_ptr</span></span><br><span class="line">std::shared_ptr&lt;<span class="keyword">int</span>&gt; ptr = std::make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">200</span>);</span><br><span class="line">std::cout &lt;&lt; *ptr &lt;&lt; std::endl;		<span class="comment">//输出200，隐式转换</span></span><br><span class="line">std::shared_ptr&lt;<span class="keyword">int</span>&gt; ptr2 = ptr;	<span class="comment">//二者指向同一个对象，计数+1</span></span><br><span class="line">std::cout &lt;&lt; ptr.<span class="built_in">use_count</span>() &lt;&lt; std::endl;	<span class="comment">//获得计数</span></span><br><span class="line">ptr2.<span class="built_in">reset</span>();						<span class="comment">//指向空，此时ptr计数为1</span></span><br><span class="line"><span class="keyword">int</span> * t = ptr.<span class="built_in">get</span>();				<span class="comment">//从shared_ptr中获取资源，不推荐这么做</span></span><br><span class="line"><span class="comment">//当ptr使用reset或本段代码结束时，自动调用shared_ptr的delete，结束</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="二、在资源管理类中当心copying行为"><a href="#二、在资源管理类中当心copying行为" class="headerlink" title="二、在资源管理类中当心copying行为"></a>二、在资源管理类中当心copying行为</h4><p>   当一个RAII对象被复制，常见有几种可能可供选择：</p>
<ul>
<li>禁止复制【不拷贝】</li>
<li>对底层资源实行引用计数并写好它的deleter（删除器）【浅拷贝+计数】</li>
<li>复制底部资源【移动】</li>
<li>转移资源拥有权【深拷贝】</li>
</ul>
<p>   其中，auto_ptr总是会销毁对象，而其余智能指针可以自定义删除器，带自定义删除器的shared_ptr写法如下：</p>
   <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FileCloser</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(FILE* fp)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="built_in">fclose</span>(fp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function">std::shared_ptr&lt;FILE, FileCloser&gt; <span class="title">sptr</span><span class="params">(fopen(<span class="string">&quot;test_file.txt&quot;</span>, <span class="string">&quot;w&quot;</span>))</span></span>;</span><br></pre></td></tr></table></figure>

<p>   使用lambda表达式定义删除器：</p>
   <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::shared_ptr&lt;FILE&gt; <span class="title">sptr</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    fopen(<span class="string">&quot;test_file.txt&quot;</span>, <span class="string">&quot;w&quot;</span>), [](FILE* fp) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        std::cout &lt;&lt; <span class="string">&quot;close &quot;</span> &lt;&lt; fp &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="params"><span class="function">        fclose(fp);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="三、在资源管理类中提供对原始对象的访问"><a href="#三、在资源管理类中提供对原始对象的访问" class="headerlink" title="三、在资源管理类中提供对原始对象的访问"></a>三、在资源管理类中提供对原始对象的访问</h4><p>因为历史原因，总会有API的参数不是智能指针，这时需要我们对于RAII管理的原始资源提供访问。</p>
<p>一种方式是使用get函数，这种方法较为繁琐，但更为安全，另一种方式是采用（）运算符重载来提供隐式转换，但有时会造成程序员写出不安全的代码，比如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C API:</span></span><br><span class="line"><span class="function">FontHandle <span class="title">getFont</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">releaseFont</span><span class="params">(FontHandle fh)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Font</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	FontHandle f;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">explicit</span> <span class="title">Font</span><span class="params">(FontHandle fh)</span>:f(fh)&#123;</span>&#125;</span><br><span class="line">    	~<span class="built_in">Font</span>()&#123;<span class="built_in">releaseFont</span>(f);&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">operator</span> <span class="title">FontHandle</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> f;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//use</span></span><br><span class="line"><span class="function">Font <span class="title">f1</span><span class="params">(getFont())</span></span>;</span><br><span class="line">FontHandle f2 = f1;	</span><br><span class="line"><span class="comment">//本意是Font f2 = f1，但写错成了FontHandle f2 = f1，编译器不会发出警告，然而若是f1被释放，f2则会虚吊</span></span><br></pre></td></tr></table></figure>

<p>值得一提的是，在C++1x的智能指针中，同时提供了隐式转换和显示转换，但自己写RAII类时，一般采用显式的get方法写更佳。</p>
<h4 id="四、成对地采用new，delete"><a href="#四、成对地采用new，delete" class="headerlink" title="四、成对地采用new，delete"></a>四、成对地采用new，delete</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptr = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">delete</span> ptr;</span><br><span class="line"><span class="keyword">int</span> *ptr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">delete</span> []ptr;</span><br></pre></td></tr></table></figure>

<p>因为new出的空间排布很可能是这样的：</p>
<p>单对象： [Object]</p>
<p>多对象：[计数n]|[Object | Object|……]</p>
<p>调用单对象的new，多对象的delete []，可能会delete掉其它一些部分，造成错误；调用多对象的new T[n]，单对象的delete，会导致内存没被释放完，造成内存泄漏</p>
<h4 id="五、以独立语句将newed对象放入指针"><a href="#五、以独立语句将newed对象放入指针" class="headerlink" title="五、以独立语句将newed对象放入指针"></a>五、以独立语句将newed对象放入指针</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(std::auto_ptr&lt;<span class="keyword">int</span>&gt;, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nowsum</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">handle</span>(std::auto_ptr&lt;<span class="keyword">int</span>&gt;(<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">10</span>)), <span class="built_in">nowsum</span>());</span><br></pre></td></tr></table></figure>

<p>上述的handle使用起来可能会造成内存泄漏，因为编译器要调用handle函数，需要执行三个操作：</p>
<ul>
<li>nowsum()</li>
<li>new int(10)</li>
<li>调用auto_ptr构造函数</li>
</ul>
<p>我们无法确定编译器怎样完成这一过程，可能因为O3优化，它生成了如下步骤的代码：</p>
<ol>
<li>new int(10)</li>
<li>nowsum()</li>
<li>调用auto_ptr函数</li>
</ol>
<p>这种情况下，如果nowsum阶段异常，就铁定造成资源泄露，故而需要<strong>以独立语句将newed对象放入智能指针</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::auto_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line"><span class="built_in">handle</span>(ptr, <span class="built_in">nowsum</span>());</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用命令</title>
    <url>/archives/33f59116.html</url>
    <content><![CDATA[<h2 id="Hexo常用命令记录"><a href="#Hexo常用命令记录" class="headerlink" title="Hexo常用命令记录"></a>Hexo常用命令记录</h2><h3 id="每次提交前"><a href="#每次提交前" class="headerlink" title="每次提交前"></a>每次提交前</h3><ul>
<li>hexo clean</li>
<li>hexo g</li>
<li>hexo s</li>
<li>hexo d</li>
</ul>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><ul>
<li>hexo new “这里写文章名”</li>
</ul>
<h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><ul>
<li>hexo new page tags</li>
</ul>
<h3 id="文章头设置"><a href="#文章头设置" class="headerlink" title="文章头设置"></a>文章头设置</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo-Next主题配置	</span><br><span class="line">date: 2021-01-20 21:01:24</span><br><span class="line">categories:	</span><br><span class="line"><span class="bullet">  -</span> Hexo网站</span><br><span class="line"><span class="bullet">  -</span> Next主题</span><br><span class="line">tags: 							</span><br><span class="line"><span class="bullet">  -</span> Hexo</span><br><span class="line"><span class="bullet">  -</span> Next</span><br><span class="line">abbrlink:				</span><br><span class="line">comments: true </span><br><span class="line"><span class="section">top: true</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
