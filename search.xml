<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Effective C++ 资源管理</title>
    <url>/archives/8a9f90a1.html</url>
    <content><![CDATA[<p>本章提出的不少思想和方法，在目前的modern C++中已经得到了实践和改进，因此，曾思考过是否要写本章笔记，后来觉得，了解一下来龙去脉也挺好的，所以有了本次总结。</p>
<h4 id="一、以对象管理资源"><a href="#一、以对象管理资源" class="headerlink" title="一、以对象管理资源"></a>一、以对象管理资源</h4><p>所谓资源，便是使用之后须还给系统，C++常见的资源类型有：动态申请的内存，文件描述符，互斥锁，数据库连接，网络socket连接等等，由于可能存在的各种问题，推荐以对象管理资源的形式对资源进行管理。</p>
<ol>
<li><p>为何以对象管理资源</p>
<p>通常情况下，我们可能会这样写一个程序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>&#123;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Example *ptre = <span class="keyword">new</span> Example;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">delete</span> ptre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但这样的内存管理具有一定缺陷，若是控制流由于异常，过早的return，或是被魔改而提前退出而抵达不了<code>delete ptre</code>语句，我们便可能将Example所保存的那部分资源泄露。</p>
<p>故而，C++提出了以对象管理资源的方式，把资源放入对象中，当控制流离开func，该对象对应的析构函数便可以自动释放那些资源，这正是利用了<strong>C++析构函数自动调用机制来解决问题（即系统自动释放栈内资源）</strong>。</p>
</li>
<li><p>以对象管理资源</p>
<p>以对象管理资源应当遵循两个基本守则：</p>
<ul>
<li>获得资源后立刻放入对象</li>
<li>管理对象调用析构函数时确保释放资源</li>
</ul>
</li>
<li><p>C++的智能指针</p>
<p>遵循以对象管理资源的理念，C++提供了几个智能指针：<code>auto_ptr</code>，<code>shared_ptr</code>，<code>unique_ptr</code>以及<code>weak_ptr</code>。</p>
<p>首先须说明的是，<code>auto_ptr</code>由于并不符合copy语义，而更像是移动语义，所以C++1x中已被<code>unique_ptr</code>代替，接下来康康auto和 shared两种ptr的用法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//智能指针使用示例</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memroy&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//auto_ptr</span></span><br><span class="line"><span class="function">std::auto_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">2</span>))</span></span>;</span><br><span class="line">std::auto_ptr&lt;<span class="keyword">int</span>&gt; ptr2 = ptr;		<span class="comment">//ptr为null，根本不符合copy语义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shared_ptr</span></span><br><span class="line">std::shared_ptr&lt;<span class="keyword">int</span>&gt; ptr = std::make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">200</span>);</span><br><span class="line">std::cout &lt;&lt; *ptr &lt;&lt; std::endl;		<span class="comment">//输出200，隐式转换</span></span><br><span class="line">std::shared_ptr&lt;<span class="keyword">int</span>&gt; ptr2 = ptr;	<span class="comment">//二者指向同一个对象，计数+1</span></span><br><span class="line">std::cout &lt;&lt; ptr.<span class="built_in">use_count</span>() &lt;&lt; std::endl;	<span class="comment">//获得计数</span></span><br><span class="line">ptr2.<span class="built_in">reset</span>();						<span class="comment">//指向空，此时ptr计数为1</span></span><br><span class="line"><span class="keyword">int</span> * t = ptr.<span class="built_in">get</span>();				<span class="comment">//从shared_ptr中获取资源，不推荐这么做</span></span><br><span class="line"><span class="comment">//当ptr使用reset或本段代码结束时，自动调用shared_ptr的delete，结束</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="二、在资源管理类中当心copying行为"><a href="#二、在资源管理类中当心copying行为" class="headerlink" title="二、在资源管理类中当心copying行为"></a>二、在资源管理类中当心copying行为</h4><p>   当一个RAII对象被复制，常见有几种可能可供选择：</p>
<ul>
<li>禁止复制</li>
<li>对底层资源实行引用计数并写好它的deleter（删除器）</li>
<li>复制底部资源</li>
<li>转移资源拥有权</li>
</ul>
<p>   其中，auto_ptr总是会销毁对象，而其余智能指针可以自定义删除器，带自定义删除器的shared_ptr写法如下：</p>
   <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FileCloser</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(FILE* fp)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="built_in">fclose</span>(fp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function">std::shared_ptr&lt;FILE, FileCloser&gt; <span class="title">sptr</span><span class="params">(fopen(<span class="string">&quot;test_file.txt&quot;</span>, <span class="string">&quot;w&quot;</span>))</span></span>;</span><br></pre></td></tr></table></figure>

<p>   使用lambda表达式定义删除器：</p>
   <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::shared_ptr&lt;FILE&gt; <span class="title">sptr</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    fopen(<span class="string">&quot;test_file.txt&quot;</span>, <span class="string">&quot;w&quot;</span>), [](FILE* fp) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        std::cout &lt;&lt; <span class="string">&quot;close &quot;</span> &lt;&lt; fp &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="params"><span class="function">        fclose(fp);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="三、在资源管理类中提供对原始对象的访问"><a href="#三、在资源管理类中提供对原始对象的访问" class="headerlink" title="三、在资源管理类中提供对原始对象的访问"></a>三、在资源管理类中提供对原始对象的访问</h4><p>因为历史原因，总会有API的参数不是智能指针，这时需要我们对于RAII管理的原始资源提供访问。</p>
<p>一种方式是使用get函数，这种方法较为繁琐，但更为安全，另一种方式是采用（）运算符重载来提供隐式转换，但有时会造成程序员写出不安全的代码，比如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C API:</span></span><br><span class="line"><span class="function">FontHandle <span class="title">getFont</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">releaseFont</span><span class="params">(FontHandle fh)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Font</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	FontHandle f;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">explicit</span> <span class="title">Font</span><span class="params">(FontHandle fh)</span>:f(fh)&#123;</span>&#125;</span><br><span class="line">    	~<span class="built_in">Font</span>()&#123;<span class="built_in">releaseFont</span>(f);&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">operator</span> <span class="title">FontHandle</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> f;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//use</span></span><br><span class="line"><span class="function">Font <span class="title">f1</span><span class="params">(getFont())</span></span>;</span><br><span class="line">FontHandle f2 = f1;	</span><br><span class="line"><span class="comment">//本意是Font f2 = f1，但写错成了FontHandle f2 = f1，编译器不会发出警告，然而若是f1被释放，f2则会虚吊</span></span><br></pre></td></tr></table></figure>

<p>值得一提的是，在C++1x的智能指针中，同时提供了隐式转换和显示转换，但自己写RAII类时，一般采用显式的get方法写更佳。</p>
<h4 id="四、成对地采用new，delete"><a href="#四、成对地采用new，delete" class="headerlink" title="四、成对地采用new，delete"></a>四、成对地采用new，delete</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptr = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">delete</span> ptr;</span><br><span class="line"><span class="keyword">int</span> *ptr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">delete</span> []ptr;</span><br></pre></td></tr></table></figure>

<p>因为new出的空间排布很可能是这样的：</p>
<p>单对象： [Object]</p>
<p>多对象：[计数n]|[Object | Object|……]</p>
<p>调用单对象的new，多对象的delete []，可能会delete掉其它一些部分，造成错误；调用多对象的new T[n]，单对象的delete，会导致内存没被释放完，造成内存泄漏</p>
<h4 id="五、以独立语句将newed对象放入指针"><a href="#五、以独立语句将newed对象放入指针" class="headerlink" title="五、以独立语句将newed对象放入指针"></a>五、以独立语句将newed对象放入指针</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(std::auto_ptr&lt;<span class="keyword">int</span>&gt;, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nowsum</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">handle</span>(std::auto_ptr&lt;<span class="keyword">int</span>&gt;(<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">10</span>)), <span class="built_in">nowsum</span>());</span><br></pre></td></tr></table></figure>

<p>上述的handle使用起来可能会造成内存泄漏，因为编译器要调用handle函数，需要执行三个操作：</p>
<ul>
<li>nowsum()</li>
<li>new int(10)</li>
<li>调用auto_ptr构造函数</li>
</ul>
<p>我们无法确定编译器怎样完成这一过程，可能因为O3优化，它生成了如下步骤的代码：</p>
<ol>
<li>new int(10)</li>
<li>nowsum()</li>
<li>调用auto_ptr函数</li>
</ol>
<p>这种情况下，如果nowsum阶段异常，就铁定造成资源泄露，故而需要<strong>以独立语句将newed对象放入智能指针</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::auto_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line"><span class="built_in">handle</span>(ptr, <span class="built_in">nowsum</span>());</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective C++ 构造/析构/赋值运算</title>
    <url>/archives/5d44e5a9.html</url>
    <content><![CDATA[<h4 id="一、了解C-默默编写并调用了哪些函数："><a href="#一、了解C-默默编写并调用了哪些函数：" class="headerlink" title="一、了解C++默默编写并调用了哪些函数："></a>一、了解C++默默编写并调用了哪些函数：</h4><ol>
<li><p>C++编译器会自动为一个空类生成8个成员函数：</p>
<ul>
<li>default构造函数</li>
<li>析构函数</li>
<li>copy构造函数</li>
<li>copy（赋值）运算符重载</li>
<li>取址运算符重载</li>
<li>常量取址运算符重载</li>
<li>移动构造函数（C++11）</li>
<li>移动赋值运算符重载（C++11）</li>
</ul>
<p>其中，当你定义了某个函数，C++便不会生成相应的成员函数，值得注意的是，<strong>从C++11起，如果一个类有析构函数，为其生成拷贝构造函数和拷贝赋值运算符的特性被弃用了。</strong></p>
</li>
<li><p>对于一些特殊情况，C++会拒绝生成这些成员函数，例如：reference（引用）的拷贝，base类的某个函数为private，derived类不会生成相应的函数</p>
</li>
</ol>
<h4 id="二、若不想使用编译器生成的函数，就该拒绝"><a href="#二、若不想使用编译器生成的函数，就该拒绝" class="headerlink" title="二、若不想使用编译器生成的函数，就该拒绝"></a>二、若不想使用编译器生成的函数，就该拒绝</h4><p>若某个对象应具有唯一性，那对它进行copy显然是不合理的，这种情况下，自行定义或不定义copy，都没有禁止copy行为，正确的做法有两种：</p>
<ol>
<li><p>将不想使用但必须拥有的成员函数<strong>声明</strong>为private而不去实现它：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">houseforsale</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="built_in">houseforsale</span>(<span class="keyword">const</span> houseforsale&amp; rhs);	<span class="comment">//声明而不实现</span></span><br><span class="line">    	houseforsale&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> houseforsale&amp; rhs);</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>利用访问限制，定义一个base类，该类中必须具有的成员函数声明为private：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">uncopyable</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="built_in">uncopyable</span>(<span class="keyword">const</span> uncopyable&amp;);</span><br><span class="line">    	uncopyable&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> uncopyable&amp;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">houseforsale</span> :</span> <span class="keyword">public</span> uncopyforsale&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="三、为多态基类声明virtual析构函数"><a href="#三、为多态基类声明virtual析构函数" class="headerlink" title="三、为多态基类声明virtual析构函数"></a>三、为多态基类声明virtual析构函数</h4><ol>
<li><p>当一个base类指针指向derived类对象时，若直接delete掉这个基类指针，会导致derived类资源未被释放，从而使得内存泄漏，故而在写希望产生多态效果的基类时，要将基类析构函数写为虚函数：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">base</span>()&#123;&#125;</span><br><span class="line">     <span class="keyword">virtual</span> ~<span class="built_in">base</span>()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">derived</span> :</span> <span class="keyword">public</span> base&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>虚函数为C++运行时多态（同名的函数，不同的效果）提供了支持，其基本原理是，具有虚函数的类中，除了成员数据部分，还会放一个虚函数表指针，指向一个放置虚函数指针的虚函数表，在运行阶段，程序通过虚函数表指针，找到虚函数表，再找到相应的函数，完成多态。</p>
</li>
<li><p>虚函数表指针是一个指针，是具有大小的，在32位系统中指针大小为32位bit（4byte），64位系统中为64位bit（8byte），因此，虽然虚函数很强大，但不必使每个类都有虚函数，通常做法是：当一个类中必不可少有一个虚函数时，才声明虚析构函数。</p>
</li>
</ol>
<h4 id="四、不要使析构函数抛出异常"><a href="#四、不要使析构函数抛出异常" class="headerlink" title="四、不要使析构函数抛出异常"></a>四、不要使析构函数抛出异常</h4><p>C++不喜欢析构函数吐出异常，比如</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weight</span>&#123;</span></span><br><span class="line">    ~<span class="built_in">Weight</span>()&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">std::vector&lt;Weight&gt; v;</span><br></pre></td></tr></table></figure>

<p>当v销毁时，它会销毁vector中的每一个Weight，但若有两个Weight在销毁时都抛出异常，会使程序终止或导致不明确行为，所以析构函数的异常应当自我消化，在捕捉到异常时，应当终止程序或记录异常采用鸵鸟策略，绝不应当在析构函数中抛出：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">example</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	Dbconnection db;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	~<span class="built_in">example</span>()&#123;</span><br><span class="line">        	<span class="keyword">try</span>&#123;db.<span class="built_in">close</span>();&#125;</span><br><span class="line">        	<span class="built_in"><span class="keyword">catch</span></span>(...)&#123;</span><br><span class="line">            	std::<span class="built_in">abort</span>();	<span class="comment">//使不正常程序终止</span></span><br><span class="line">            					<span class="comment">//或记录析构失败，继续执行</span></span><br><span class="line">        	&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外，作为软件开发人员，我们可将析构中可能包含异常的行为写成一个函数，供用户调用，使得用户去处理这个异常（甩锅给客户），若析构时发现用户未调用该函数，则在析构时处理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">example</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	Dbconnection db;</span><br><span class="line">    	<span class="keyword">bool</span> isclosed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">closedb</span><span class="params">()</span></span>&#123;			<span class="comment">//写给客户</span></span><br><span class="line">            db.<span class="built_in">close</span>();</span><br><span class="line">            isclosed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    	~<span class="built_in">example</span>()&#123;</span><br><span class="line">            <span class="keyword">if</span>(!isclosed)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;db.<span class="built_in">close</span>();&#125;</span><br><span class="line">        		<span class="built_in"><span class="keyword">catch</span></span>(...)&#123;</span><br><span class="line">            		std::<span class="built_in">abort</span>();	<span class="comment">//使不正常程序终止</span></span><br><span class="line">            		<span class="comment">//或 记录析构失败，继续执行</span></span><br><span class="line">        		&#125;</span><br><span class="line">            &#125;</span><br><span class="line">    	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="五、不在构造或析构过程中调用virtual函数"><a href="#五、不在构造或析构过程中调用virtual函数" class="headerlink" title="五、不在构造或析构过程中调用virtual函数"></a>五、不在构造或析构过程中调用virtual函数</h4><ol>
<li><p>举例游戏场景：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Game</span>();</span><br><span class="line">    ~<span class="built_in">Game</span>();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Log</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Game::<span class="built_in">Game</span>()&#123;</span><br><span class="line">        <span class="built_in">Log</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Game() Log()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line">Game::~<span class="built_in">Game</span>()&#123;</span><br><span class="line">        <span class="built_in">Log</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~Game() Log()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kill</span> :</span> <span class="keyword">public</span> Game &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Log</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;	<span class="comment">//const override表示重写父类虚函数</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Kill Log()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    Kill a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 这段代码在编译时会报waning，运行时也会出错，因为是Log函数为纯虚函数，无法对它产生调用，因为在派生类构造阶段，会先调用父类构造，再调用成员对象构造，最后才是自己的成员变量构造，故而在第一阶段时，父类的构造函数调用的是它本身的纯虚函数，而不是派生类的函数</p>
<p> 同样的道理也适用于析构函数，众所周知，析构函数和构造函数的顺序是反着来的</p>
</li>
<li><p>更奇怪的情况下，可能会让人摸不着头脑：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">Game</span>()&#123;<span class="built_in">init</span>();&#125;</span><br><span class="line">     <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Log</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">Log</span>();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kill</span> :</span> <span class="keyword">public</span> Game &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Log</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;	<span class="comment">//const override表示重写父类虚函数</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Kill Log()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> 对于这段代码，未经优化的编译器不会有任何反应（据说Visual Studio集成了整本Effective C++给出的建议），然而最终运行时，会报错：Kill调用了错误版本的Log()函数，使人在风中凌乱……所以，<strong>一定要确定自己的代码中，构造和析构函数中不调用虚函数</strong></p>
</li>
<li><p>那么，我们想实现类似的功能该怎么办呢，一个好的方法将原函数写为非虚的，在构造时传参到Base类中</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="built_in">Game</span>(<span class="keyword">const</span> string&amp; loginfo)&#123;</span><br><span class="line">            <span class="built_in">Log</span>(loginfo);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="built_in">Log</span>(<span class="keyword">const</span> string&amp; loginfo)&#123;....&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kill</span> :</span> <span class="keyword">public</span> Game&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="built_in">Kill</span>(parameters):<span class="built_in">Game</span>(<span class="built_in">createinfo</span>(parameters))&#123;...&#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">static</span> <span class="keyword">const</span> string&amp; <span class="title">createinfo</span><span class="params">(parameters)</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="六、operator-“-“-的重载"><a href="#六、operator-“-“-的重载" class="headerlink" title="六、operator “ = “ 的重载"></a>六、operator “ = “ 的重载</h4><ol>
<li><p>为了使自定义重载运算符和基本类型运算符保持一致，我们通常使” = “返回一个当前对象的reference to *this</p>
</li>
<li><p>对于一个含指针的类Weight，我们对它的赋值函数进行三次改版。</p>
<p>先是Weight类：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weight</span>&#123;</span></span><br><span class="line">    Bitmap *pb;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	Weight&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Weight&amp; rhs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一版赋值函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//version_1</span></span><br><span class="line">Weight&amp; Weight::<span class="keyword">operator</span> = (<span class="keyword">const</span> Weight&amp; rhs)&#123;</span><br><span class="line">    <span class="keyword">delete</span> pb;</span><br><span class="line">    pb = <span class="keyword">new</span> <span class="built_in">Bitmap</span>(*rhs.pb);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种情况下，当<code>lhs == rhs</code>时，逻辑上，这个函数已经出错了！Bitmap将指向一个已被删除的对象！由此引出第二版赋值构造函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//version_2</span></span><br><span class="line">Weight&amp; Weight::<span class="keyword">operator</span> = (<span class="keyword">const</span> Weight&amp; rhs)&#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs == *<span class="keyword">this</span>)	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">delete</span> pb;</span><br><span class="line">    pb = <span class="keyword">new</span> <span class="built_in">Bitmap</span>(*rhs.pb);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个版本中，我们对于传入参数和自身进行了比较，有效地避免了<code>rhs == lhs</code>的问题。</p>
<p>但是，这个新版本依旧有问题：若是new Bitmap时出现异常（可能由于内存不够，可能由于copy抛出异常），由于先删除了pb后赋值，对象内的指针会指向一块被删除的Bitmap，为此，出现了第三版：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//version_3</span></span><br><span class="line">Weight&amp; Weight::<span class="keyword">operator</span> = (<span class="keyword">const</span> Weight&amp; rhs)&#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs == *<span class="keyword">this</span>)	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    Bitmap *tpb = pb;</span><br><span class="line">    pb = <span class="keyword">new</span> <span class="built_in">Bitmap</span>(*rhs.pb);</span><br><span class="line">    <span class="keyword">delete</span> tpb;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一版就没有上述两版的问题了，它既有证同测试，又有防异常行为，prefect version达成了！</p>
<p>对于性能提升上，Ecpp还给出了一个新的版本：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Weight &amp;rhs)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">Weight&amp; Weight::<span class="keyword">operator</span> = (Weight rhs)&#123;</span><br><span class="line">    <span class="built_in">swap</span>(rhs);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>它利用了传值时会调用拷贝构造这一行为，其思想和移动很像，这应该是“移动”的前身了！</strong></p>
</li>
</ol>
<h4 id="七、复制对象时切勿忘记复制它的每个部分"><a href="#七、复制对象时切勿忘记复制它的每个部分" class="headerlink" title="七、复制对象时切勿忘记复制它的每个部分"></a>七、复制对象时切勿忘记复制它的每个部分</h4><ol>
<li>copy系函数应当确保复制<strong>对象内所有的成员变量</strong>和<strong>所有Base类的成分</strong></li>
<li>不要使copy构造函数和copy operator函数相互调用，通常将它们共通的部分写在一个函数中去调用。</li>
</ol>
]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective C++ 从C到Cpp</title>
    <url>/archives/e18b7eda.html</url>
    <content><![CDATA[<h4 id="一、将C-视为一个语言联邦"><a href="#一、将C-视为一个语言联邦" class="headerlink" title="一、将C++视为一个语言联邦"></a>一、将C++视为一个语言联邦</h4><p><code>C++ ≈ &#123;C, C with class, Template C++, STL&#125;</code>，对于内置类型而言，Cpp采用以值传递的方式更高效，而对于用户自定义类型而言，一般采用以常引用传递的方式更好（这其中的成因与底层指令相关，所以学一学汇编是很重要的），在使用CPP哪个部分时，遵循那个部分。</p>
<h4 id="二、尽量不要使用C中的define语句"><a href="#二、尽量不要使用C中的define语句" class="headerlink" title="二、尽量不要使用C中的define语句"></a>二、尽量不要使用C中的define语句</h4><p>尽量不要使用<code>define</code>，尽管<code>define</code>很高效，但他只是忠实地替换了原始代码，会造成很多问题比如：</p>
<ol>
<li><p>定义<code>#define ABC 114514</code>时，由于编译器在<strong>预处理阶段</strong>移走了<code>ABC</code>而用114514替代，之前ABC的标记已经没有了，若是出了问题，打印的错误信息很可能是<code>error: 114514……</code>，而不是<code>error ABC...</code>，在带项目中难以定位，建议用<code>const int ABC = 114514</code>替代，出错也好debug</p>
</li>
<li><p>考虑使用宏：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a, b) (a) &gt; (b) ? (a) : (b)</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">max</span>(++a, b);		<span class="comment">//a会自增两次</span></span><br><span class="line"><span class="built_in">max</span>(++a, b + <span class="number">10</span>);	<span class="comment">//a自增一次</span></span><br></pre></td></tr></table></figure>
<p>这显然非常扯淡，一般而言，使用inline函数模板代替宏，更安全，更省心</p>
<blockquote>
<p>tips: 内联函数与宏的区别</p>
<p>1、内联函数在编译时展开，而宏在预编译时展开</p>
<p>2、在编译的时候，内联函数直接被嵌入到目标代码中去，而宏只是一个简单的文本替换。</p>
<p>3、内联函数可以进行诸如类型安全检查、语句是否正确等编译功能，宏不具有这样的功能。</p>
<p>4、宏不是函数，而inline是函数</p>
<p>5、宏在定义时要小心处理宏参数，一般用括号括起来，否则容易出现二义性。而内联函数不会出现二义性。</p>
<p>6、inline可以不展开，宏一定要展开。因为inline指示对编译器来说，只是一个建议，编译器可以选择忽略该建议，不对该函数进行展开。</p>
<p>7、宏定义在形式上类似于一个函数，但在使用它时，仅仅只是做预处理器符号表中的简单替换，因此它不能进行<strong>参数有效性的检测</strong>，也就不能享受C++编译器严<strong>格类型检查</strong>的好处，另外它的<strong>返回值也不能被强制转换</strong>为可转换的合适的类型，这样，它的使用就存在着一系列的隐患和局限性。</p>
</blockquote>
</li>
<li><p>想在编译期使用宏定义类似的功能，可使用<code>enum hack</code>大法，enum的行为很像加了限制区间的宏定义</p>
</li>
</ol>
<h4 id="三、尽可能多地使用const："><a href="#三、尽可能多地使用const：" class="headerlink" title="三、尽可能多地使用const："></a>三、尽可能多地使用const：</h4><p>区别<code>const int *</code>和<code>int * const</code>，前者修饰的是指向的东西，后者修饰的是指针</p>
<p>对于STL迭代器，其规则与主语言又有所不同：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;::iterator iter;	<span class="comment">//相当于int * const，迭代器指向不能改变</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::const_iterator citer;	<span class="comment">//相当于const int *，不能通过迭代器修改指向的元素</span></span><br></pre></td></tr></table></figure>

<p>对于运算符重载，最好将运算数声明为<code>const-reference</code>，并在重载时，考虑与基本类型运算符行为保持一致。</p>
<p>const对象只能调用const成员函数，这是符合const语义（不修改）的，同理，const成员函数内部只能访问成员变量，但无法修改，也无法访问普通成员函数（普通成员函数可能修改成员变量）</p>
<ol>
<li><p>将一些函数，变量加const可帮助编译器检查错误用法</p>
</li>
<li><p>const和non-const版本的函数除了返回以外无差别时，可使用强转令non-const调用const</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> position) <span class="keyword">const</span>&#123;</span><br><span class="line">    ........</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> position) &#123;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> &amp;&gt;(</span><br><span class="line">        <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> A&amp;&gt;(*<span class="keyword">this</span>)</span><br><span class="line">        	[position]</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="四、确定对象使用前被初始化："><a href="#四、确定对象使用前被初始化：" class="headerlink" title="四、确定对象使用前被初始化："></a>四、确定对象使用前被初始化：</h4><ol>
<li><p>为确保对象的行为如你预计般地可靠，必须确保每个对象使用前被初始化</p>
</li>
<li><p>对于成员对象，通常采用初始化列表的形式构造：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Society</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">     People p;</span><br><span class="line">     <span class="keyword">int</span> nums;</span><br><span class="line">     <span class="keyword">const</span> string rule;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">Society</span>(<span class="keyword">const</span> People&amp; tp, <span class="keyword">const</span> string&amp; s, <span class="keyword">int</span> n):</span><br><span class="line">         <span class="built_in">p</span>(tp),</span><br><span class="line">         <span class="built_in">rule</span>(s)</span><br><span class="line">        &#123;nums = n&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 通常，写为初始化列表的成员对象直接调用自己的构造函数进行构造，而采若用赋值的方式，其行为往往是使用default构造函数构造成员对象，再使用重载的”=”进行赋值。</p>
<p> 类型为引用和常量的成员变量必须使用初始化列表，不能采用赋值的形式</p>
<p> 对于一些初始化和赋值表现一样好的成员，可考虑写一个init函数，供多个不同的构造函数使用</p>
</li>
<li><p>对于non-local static对象，即多个文件（作用域，对象……）共享的静态对象，我们一般采用单例模式</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="built_in">test</span>()&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function">test&amp; <span class="title">get_test</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">static</span> test t;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用命令</title>
    <url>/archives/33f59116.html</url>
    <content><![CDATA[<h2 id="Hexo常用命令记录"><a href="#Hexo常用命令记录" class="headerlink" title="Hexo常用命令记录"></a>Hexo常用命令记录</h2><h3 id="每次提交前"><a href="#每次提交前" class="headerlink" title="每次提交前"></a>每次提交前</h3><ul>
<li>hexo clean</li>
<li>hexo g</li>
<li>hexo s</li>
<li>hexo d</li>
</ul>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><ul>
<li>hexo new “这里写文章名”</li>
</ul>
<h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><ul>
<li>hexo new page tags</li>
</ul>
<h3 id="文章头设置"><a href="#文章头设置" class="headerlink" title="文章头设置"></a>文章头设置</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo-Next主题配置	</span><br><span class="line">date: 2021-01-20 21:01:24</span><br><span class="line">categories:	</span><br><span class="line"><span class="bullet">  -</span> Hexo网站</span><br><span class="line"><span class="bullet">  -</span> Next主题</span><br><span class="line">tags: 							</span><br><span class="line"><span class="bullet">  -</span> Hexo</span><br><span class="line"><span class="bullet">  -</span> Next</span><br><span class="line">abbrlink:				</span><br><span class="line">comments: true </span><br><span class="line"><span class="section">top: true</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
